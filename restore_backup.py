# coding=utf-8
# 
# Copy the backup files over from the production web server

from utils.file import getFiles
from web_backup.utility import get_backup_directory
from web_backup.clear_backup import toFullPath
from os.path import join
from datetime import date
from subprocess import call
import logging
logger = logging.getLogger(__name__)



def mostRecentWebBackup():
    """
    return: [String] the file name of the most recent web backup
    """
    return sorted(filter(webBackup, getFiles(get_backup_directory()))
                 , key=dateFromFilename, reverse=True)[0]



def mostRecentSqlBackup():
    """
    return: [String] the file name of the most recent database backup
    """
    return sorted(filter(sqlBackup, getFiles(get_backup_directory()))
                 , key=dateFromFilename, reverse=True)[0]



def dateFromFilename(fn):
    """
    [String] fn => [datetime] date embedded in the file name

    The web and database backup files are named as:

    web-mm-dd-yy.tar.gz
    db-mm-dd-yy.sql.gz

    convert the file name to a datetime.date object
    """
    tokens = fn.split('-')
    return date(2000 + int(tokens[3][0:2]), int(tokens[1]), int(tokens[2]))



def webBackup(fn):
    """
    [String] fn => [Bool] if the backup file is a web backup
    """
    if len(fn) > 3 and fn[0:3] == 'web':
        return True
    else:
        return False



def sqlBackup(fn):
    """
    [String] fn => [Bool] if the backup file is a sql backup
    """
    if len(fn) > 2 and fn[0:2] == 'db':
        return True
    else:
        return False



def createRestoreScript(webBackup, sqlBackup):
    """
    [Srtring] webBackup, [String] sqlBackup => [String] full path to
        the restore script
    """
    script = join('/home/cuser/scripts', 'do_restore.sh')
    with open(script, 'w') as outputFile:
        outputFile.write('#!/bin/bash\n\n')
        outputFile.write('# generated by restore_backup.py\n\n')
        outputFile.write('/home/cuser/scripts/restore_web.sh {0}\n'.
                            format(join(get_backup_directory(), webBackup)))
        outputFile.write('/home/cuser/scripts/restore_db.sh {0}'.
                            format(join(get_backup_directory(), sqlBackup)))
    return script




if __name__ == '__main__':
    import logging.config
    logging.config.fileConfig('logging.config',   
                                disable_existing_loggers=False)
	
    logger.info('Start restore')
    webBackup = mostRecentWebBackup()
    sqlBackup = mostRecentSqlBackup()

    # The two backup files should be on the same dates.
    assert dateFromFilename(webBackup) == dateFromFilename(sqlBackup)

    # Generate and run the restore script
    script = createRestoreScript(webBackup, sqlBackup)
    # call('chmod u+x {0}'.format(script))
    if call(script) == 0:
        print('website restored')
    else:
        print('something goes wrong')
